{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, createBlock as _createBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"canvas\", {\n  id: \"sketch\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_2 = {\n  class: \"ma-5\"\n};\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"mt-2\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_4 = {\n  style: {\n    \"border\": \"solid\",\n    \"background-color\": \"#979797\"\n  }\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_view = _resolveComponent(\"router-view\");\n  const _component_v_window_item = _resolveComponent(\"v-window-item\");\n  const _component_v_window = _resolveComponent(\"v-window\");\n  const _component_v_btn = _resolveComponent(\"v-btn\");\n  const _component_v_main = _resolveComponent(\"v-main\");\n  const _component_v_app = _resolveComponent(\"v-app\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_hoisted_1, _createVNode(_component_v_app, {\n    style: {\n      \"background-color\": \"#202124\"\n    }\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_main, null, {\n      default: _withCtx(() => [_createElementVNode(\"div\", null, [_createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_v_window, {\n        modelValue: _ctx.selected_page,\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.selected_page = $event),\n        style: {\n          \"border\": \"solid\",\n          \"background-color\": \"#979797\"\n        }\n      }, {\n        default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.pages, (page, index) => {\n          return _openBlock(), _createBlock(_component_v_window_item, {\n            key: index,\n            value: page.name,\n            \"max-height\": \"80%\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_router_view)]),\n            _: 2 /* DYNAMIC */\n          }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"value\"]);\n        }), 128 /* KEYED_FRAGMENT */))]),\n\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"modelValue\"]), _hoisted_3, _createElementVNode(\"div\", _hoisted_4, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.pages, (page, index) => {\n        return _openBlock(), _createBlock(_component_v_btn, {\n          key: index,\n          onClick: $event => {\n            _ctx.$router.push(page.name);\n            this.selected_page = page.name;\n          }\n        }, {\n          default: _withCtx(() => [_createTextVNode(_toDisplayString(page.name), 1 /* TEXT */)]),\n\n          _: 2 /* DYNAMIC */\n        }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"onClick\"]);\n      }), 128 /* KEYED_FRAGMENT */))])])])]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  })], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";;gCAEYA,oBAA6B;EAArBC,EAAE,EAAC;AAAQ;;EAMVC,KAAK,EAAC;AAAM;gCAYbF,oBAAwB;EAAnBE,KAAK,EAAC;AAAM;;EACZC,KAAgD,EAAhD;IAAA;IAAA;EAAA;AAAgD;;;;;;;;6DAnB7DC,UAA6B,EAErCC,aA6BQC;IA7BDH,KAAiC,EAAjC;MAAA;IAAA;EAAiC;sBACpC,MA2BS,CA3BTE,aA2BSE;wBAzBL,MAwBM,CAxBNP,oBAwBM,cAvBFA,oBAqBM,OArBNQ,UAqBM,GApBFH,aAUWI;oBAVQC,kBAAa;mEAAbA,kBAAa;QAAEP,KAA+C,EAA/C;UAAA;UAAA;QAAA;;0BAE1B,MAA8B,oBADlCQ,oBAQgBC,6BAPYF,UAAK,GAArBG,IAAI,EAAEC,KAAK;+BADvBC,aAQgBC;YANXC,GAAG,EAAEH,KAAK;YACVI,KAAK,EAAEL,IAAI,CAACM,IAAI;YACjB,YAAU,EAAC;;8BAEX,MAA2B,CAA3Bd,aAA2Be;;;;;;yCAInCC,UAAwB,EACxBrB,oBAOM,OAPNsB,UAOM,sBANFX,oBAKQC,6BAJoBF,UAAK,GAArBG,IAAI,EAAEC,KAAK;6BADvBC,aAKQQ;UAHHN,GAAG,EAAEH,KAAK;UACVU,OAAK;YAAEd,YAAO,CAACe,IAAI,CAACZ,IAAI,CAACM,IAAI;YAAA,KAAQO,aAAa,GAAGb,IAAI,CAACM,IAAI;UAAA;;4BAC7D,MAAa,mCAAXN,IAAI,CAACM,IAAI","names":["_createElementVNode","id","class","style","_hoisted_1","_createVNode","_component_v_app","_component_v_main","_hoisted_2","_component_v_window","_ctx","_createElementBlock","_Fragment","page","index","_createBlock","_component_v_window_item","key","value","name","_component_router_view","_hoisted_3","_hoisted_4","_component_v_btn","onClick","push","selected_page"],"sourceRoot":"","sources":["C:\\Users\\joost\\Desktop\\code\\informatica\\kunstmatigeintelligentie\\src\\App.vue"],"sourcesContent":["<template>\n\n            <canvas id=\"sketch\"></canvas>\n\n    <v-app style=\"background-color: #202124\">\n        <v-main>\n\n            <div >\n                <div class=\"ma-5\" >\n                    <v-window v-model=\"selected_page\" style=\"border: solid;background-color: #979797\">\n                        <v-window-item\n                            v-for=\"(page, index) in pages\"\n                            :key=\"index\"    \n                            :value=\"page.name\"\n                            max-height=\"80%\"\n                            >\n                            <router-view></router-view>\n\n                        </v-window-item>\n                    </v-window>\n                    <div class=\"mt-2\"></div>\n                    <div style=\"border: solid; background-color: #979797\">\n                        <v-btn \n                            v-for=\"(page, index) in pages\"\n                            :key=\"index\"\n                            @click=\"$router.push(page.name); this.selected_page = page.name\"\n                            > {{page.name}}\n                        </v-btn>\n                    </div>\n                </div>\n\n            </div>\n        </v-main>\n    </v-app>\n</template>\n\n<script>\n\nclass dotGrid {\n  constructor(container = \"sketch\") {\n    this.canvasElement = document.getElementById(container);\n\n    console.log(this.canvasElement)\n    // Get the device pixel ratio, falling back to 1.\n    this.dpr = window.devicePixelRatio || 1;\n\n    this.drawable = this.canvasElement.getBoundingClientRect();\n\n    this.canvasWidth = this.drawable.width * this.dpr;\n    this.canvasHeight = this.drawable.height * this.dpr;\n\n    this.canvasElement.width = this.canvasWidth;\n    this.canvasElement.height = this.canvasHeight;\n\n    this.mouseX = 0;\n    this.mouseY = 0;\n\n    // Setup Canvas\n    this.canvas = this.canvasElement.getContext(\"2d\");\n    this.canvas.scale(this.dpr, this.dpr);\n  }\n\n  onMouseUpdate(e) {\n    this.mouseX = e.pageX - this.drawable.left;\n    this.mouseY = e.pageY - this.drawable.top;\n\n    window.requestAnimationFrame(this.draw.bind(this));\n  }\n\n  init() {\n    window.requestAnimationFrame(this.draw.bind(this));\n    // Listen for Mouse updates\n    document.body.addEventListener(\n      \"mousemove\",\n      this.onMouseUpdate.bind(this),\n      false\n    );\n  }\n\n  // Draws the background and calls the function for drawing the dots\n  draw() {\n    this.canvas.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n    this.drawDots();\n  }\n\n  /*\n  ((j - this.mouseY) / dist * 4)\n  */\n\n  // i and j function as x and y when drawing the dot grid.\n  drawDots() {\n    let size = 1;\n    let gridSize = 20;\n    for (var i = 2; i < this.canvasWidth / this.dpr / gridSize - 1; i++) {\n      for (var j = 2; j < this.canvasHeight / this.dpr / gridSize - 1; j++) {\n        let x = i * gridSize;\n        let y = j * gridSize;\n        let dist = this.pythag(x, y, this.mouseX, this.mouseY);\n        this.canvas.beginPath();\n        this.canvas.arc(\n          x + (x - this.mouseX) / dist * gridSize,\n          y + (y - this.mouseY) / dist * gridSize,\n          size,\n          size,\n          Math.PI,\n          true\n        );\n        this.canvas.fillStyle = \"white\";\n        this.canvas.fill();\n      }\n    }\n  }\n\n  // Grabs mouse position, checks if the mouse is off the screen (NaN) and calculates the distance from the mouse pointer and each dot using the pythagorean theorem.\n  pythag(ellipseX, ellipseY, mouseX, mouseY) {\n    let x = mouseX;\n    let y = mouseY;\n\n    if (x == NaN) {\n      return 1;\n    } else {\n      let leg1 = Math.abs(x - ellipseX);\n      let leg2 = Math.abs(y - ellipseY);\n      let pyth = Math.pow(leg1, 2) + Math.pow(leg2, 2);\n      return Math.sqrt(pyth);\n    }\n  }\n}\n\nconst grid = new dotGrid(\"sketch\");\ngrid.init();\n\nexport default {\n  name: 'App',\n\n  data: () => ({\n    //\n  }),\n}\n</script>\n\n<style>\n#sketch {\n    width: 100%;\n    height: 110%;\n    display: block;\n    margin: 0 auto;\n}\n</style>"]},"metadata":{},"sourceType":"module"}