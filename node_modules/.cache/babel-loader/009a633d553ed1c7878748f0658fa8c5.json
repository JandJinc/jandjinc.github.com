{"ast":null,"code":"class dotGrid {\n  constructor(container = \"sketch\") {\n    this.canvasElement = document.getElementById(\"sketch\");\n    console.log(this.canvasElement);\n    // Get the device pixel ratio, falling back to 1.\n    this.dpr = window.devicePixelRatio || 1;\n    this.drawable = this.canvasElement.getBoundingClientRect();\n    this.canvasWidth = this.drawable.width * this.dpr;\n    this.canvasHeight = this.drawable.height * this.dpr;\n    this.canvasElement.width = this.canvasWidth;\n    this.canvasElement.height = this.canvasHeight;\n    this.mouseX = 0;\n    this.mouseY = 0;\n\n    // Setup Canvas\n    this.canvas = this.canvasElement.getContext(\"2d\");\n    this.canvas.scale(this.dpr, this.dpr);\n  }\n  onMouseUpdate(e) {\n    this.mouseX = e.pageX - this.drawable.left;\n    this.mouseY = e.pageY - this.drawable.top;\n    window.requestAnimationFrame(this.draw.bind(this));\n  }\n  init() {\n    window.requestAnimationFrame(this.draw.bind(this));\n    // Listen for Mouse updates\n    document.body.addEventListener(\"mousemove\", this.onMouseUpdate.bind(this), false);\n  }\n\n  // Draws the background and calls the function for drawing the dots\n  draw() {\n    this.canvas.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n    this.drawDots();\n  }\n\n  /*\n  ((j - this.mouseY) / dist * 4)\n  */\n\n  // i and j function as x and y when drawing the dot grid.\n  drawDots() {\n    let size = 1;\n    let gridSize = 20;\n    for (var i = 2; i < this.canvasWidth / this.dpr / gridSize - 1; i++) {\n      for (var j = 2; j < this.canvasHeight / this.dpr / gridSize - 1; j++) {\n        let x = i * gridSize;\n        let y = j * gridSize;\n        let dist = this.pythag(x, y, this.mouseX, this.mouseY);\n        this.canvas.beginPath();\n        this.canvas.arc(x + (x - this.mouseX) / dist * gridSize, y + (y - this.mouseY) / dist * gridSize, size, size, Math.PI, true);\n        this.canvas.fillStyle = \"white\";\n        this.canvas.fill();\n      }\n    }\n  }\n\n  // Grabs mouse position, checks if the mouse is off the screen (NaN) and calculates the distance from the mouse pointer and each dot using the pythagorean theorem.\n  pythag(ellipseX, ellipseY, mouseX, mouseY) {\n    let x = mouseX;\n    let y = mouseY;\n    if (x == NaN) {\n      return 1;\n    } else {\n      let leg1 = Math.abs(x - ellipseX);\n      let leg2 = Math.abs(y - ellipseY);\n      let pyth = Math.pow(leg1, 2) + Math.pow(leg2, 2);\n      return Math.sqrt(pyth);\n    }\n  }\n}\nconst grid = new dotGrid(\"sketch\");\ngrid.init();\nexport default {\n  name: 'App',\n  data: () => ({\n    //\n  })\n};","map":{"version":3,"mappings":"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","names":["dotGrid","constructor","container","canvasElement","document","getElementById","console","log","dpr","window","devicePixelRatio","drawable","getBoundingClientRect","canvasWidth","width","canvasHeight","height","mouseX","mouseY","canvas","getContext","scale","onMouseUpdate","e","pageX","left","pageY","top","requestAnimationFrame","draw","bind","init","body","addEventListener","clearRect","drawDots","size","gridSize","i","j","x","y","dist","pythag","beginPath","arc","Math","PI","fillStyle","fill","ellipseX","ellipseY","NaN","leg1","abs","leg2","pyth","pow","sqrt","grid","name","data"],"sourceRoot":"","sources":["C:\\Users\\joost\\Desktop\\code\\informatica\\kunstmatigeintelligentie\\src\\App.vue"],"sourcesContent":["<template>\n    <v-app style=\"background-color: #202124\">\n        <v-main>\n            <canvas id=\"sketch\"></canvas>\n\n            <div >\n                <div class=\"ma-5\" >\n                    <v-window v-model=\"selected_page\" style=\"border: solid;background-color: #979797\">\n                        <v-window-item\n                            v-for=\"(page, index) in pages\"\n                            :key=\"index\"    \n                            :value=\"page.name\"\n                            max-height=\"80%\"\n                            >\n                            <router-view></router-view>\n\n                        </v-window-item>\n                    </v-window>\n                    <div class=\"mt-2\"></div>\n                    <div style=\"border: solid; background-color: #979797\">\n                        <v-btn \n                            v-for=\"(page, index) in pages\"\n                            :key=\"index\"\n                            @click=\"$router.push(page.name); this.selected_page = page.name\"\n                            > {{page.name}}\n                        </v-btn>\n                    </div>\n                </div>\n\n            </div>\n        </v-main>\n    </v-app>\n</template>\n\n<script>\n\nclass dotGrid {\n  constructor(container = \"sketch\") {\n    this.canvasElement = document.getElementById(\"sketch\");\n\n    console.log(this.canvasElement)\n    // Get the device pixel ratio, falling back to 1.\n    this.dpr = window.devicePixelRatio || 1;\n\n    this.drawable = this.canvasElement.getBoundingClientRect();\n\n    this.canvasWidth = this.drawable.width * this.dpr;\n    this.canvasHeight = this.drawable.height * this.dpr;\n\n    this.canvasElement.width = this.canvasWidth;\n    this.canvasElement.height = this.canvasHeight;\n\n    this.mouseX = 0;\n    this.mouseY = 0;\n\n    // Setup Canvas\n    this.canvas = this.canvasElement.getContext(\"2d\");\n    this.canvas.scale(this.dpr, this.dpr);\n  }\n\n  onMouseUpdate(e) {\n    this.mouseX = e.pageX - this.drawable.left;\n    this.mouseY = e.pageY - this.drawable.top;\n\n    window.requestAnimationFrame(this.draw.bind(this));\n  }\n\n  init() {\n    window.requestAnimationFrame(this.draw.bind(this));\n    // Listen for Mouse updates\n    document.body.addEventListener(\n      \"mousemove\",\n      this.onMouseUpdate.bind(this),\n      false\n    );\n  }\n\n  // Draws the background and calls the function for drawing the dots\n  draw() {\n    this.canvas.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n    this.drawDots();\n  }\n\n  /*\n  ((j - this.mouseY) / dist * 4)\n  */\n\n  // i and j function as x and y when drawing the dot grid.\n  drawDots() {\n    let size = 1;\n    let gridSize = 20;\n    for (var i = 2; i < this.canvasWidth / this.dpr / gridSize - 1; i++) {\n      for (var j = 2; j < this.canvasHeight / this.dpr / gridSize - 1; j++) {\n        let x = i * gridSize;\n        let y = j * gridSize;\n        let dist = this.pythag(x, y, this.mouseX, this.mouseY);\n        this.canvas.beginPath();\n        this.canvas.arc(\n          x + (x - this.mouseX) / dist * gridSize,\n          y + (y - this.mouseY) / dist * gridSize,\n          size,\n          size,\n          Math.PI,\n          true\n        );\n        this.canvas.fillStyle = \"white\";\n        this.canvas.fill();\n      }\n    }\n  }\n\n  // Grabs mouse position, checks if the mouse is off the screen (NaN) and calculates the distance from the mouse pointer and each dot using the pythagorean theorem.\n  pythag(ellipseX, ellipseY, mouseX, mouseY) {\n    let x = mouseX;\n    let y = mouseY;\n\n    if (x == NaN) {\n      return 1;\n    } else {\n      let leg1 = Math.abs(x - ellipseX);\n      let leg2 = Math.abs(y - ellipseY);\n      let pyth = Math.pow(leg1, 2) + Math.pow(leg2, 2);\n      return Math.sqrt(pyth);\n    }\n  }\n}\n\nconst grid = new dotGrid(\"sketch\");\ngrid.init();\n\nexport default {\n  name: 'App',\n\n  data: () => ({\n    //\n  }),\n}\n</script>\n\n<style>\n#sketch {\n    width: 100%;\n    height: 110%;\n    display: block;\n    margin: 0 auto;\n}\n</style>"]},"metadata":{},"sourceType":"module"}