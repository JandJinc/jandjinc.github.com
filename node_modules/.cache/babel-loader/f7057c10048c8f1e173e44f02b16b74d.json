{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"canvas\", {\n  id: \"sketch\"\n}, null, -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_view = _resolveComponent(\"router-view\");\n  const _component_v_main = _resolveComponent(\"v-main\");\n  const _component_v_app = _resolveComponent(\"v-app\");\n  return _openBlock(), _createBlock(_component_v_app, null, {\n    default: _withCtx(() => [_createVNode(_component_v_main, null, {\n      default: _withCtx(() => [_hoisted_1, _createVNode(_component_router_view)]),\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"mappings":";gCAGYA,oBAA6B;EAArBC,EAAE,EAAC;AAAQ;;;;;;uBAF3BC,aAOQC;sBANJ,MAKS,CALTC,aAKSC;wBAJL,MAA6B,CAA7BC,UAA6B,EAG7BF,aAAcG","names":["_createElementVNode","id","_createBlock","_component_v_app","_createVNode","_component_v_main","_hoisted_1","_component_router_view"],"sourceRoot":"","sources":["C:\\Users\\joost\\Desktop\\code\\informatica\\kunstmatigeintelligentie\\src\\App.vue"],"sourcesContent":["<template>\n    <v-app >\n        <v-main>\n            <canvas id=\"sketch\"></canvas>\n\n\n            <router-view/>\n        </v-main>\n    </v-app>\n</template>\n\n<script>\nclass dotGrid {\n  constructor(container = \"sketch\") {\n    this.canvasElement = document.getElementById(container);\n\n    // Get the device pixel ratio, falling back to 1.\n    this.dpr = window.devicePixelRatio || 1;\n\n    this.drawable = this.canvasElement.getBoundingClientRect();\n\n    this.canvasWidth = this.drawable.width * this.dpr;\n    this.canvasHeight = this.drawable.height * this.dpr;\n\n    this.canvasElement.width = this.canvasWidth;\n    this.canvasElement.height = this.canvasHeight;\n\n    this.mouseX = 0;\n    this.mouseY = 0;\n\n    // Setup Canvas\n    this.canvas = this.canvasElement.getContext(\"2d\");\n    this.canvas.scale(this.dpr, this.dpr);\n  }\n\n  onMouseUpdate(e) {\n    this.mouseX = e.pageX - this.drawable.left;\n    this.mouseY = e.pageY - this.drawable.top;\n\n    window.requestAnimationFrame(this.draw.bind(this));\n  }\n\n  init() {\n    window.requestAnimationFrame(this.draw.bind(this));\n    // Listen for Mouse updates\n    document.body.addEventListener(\n      \"mousemove\",\n      this.onMouseUpdate.bind(this),\n      false\n    );\n  }\n\n  // Draws the background and calls the function for drawing the dots\n  draw() {\n    this.canvas.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n    this.drawDots();\n  }\n\n  /*\n  ((j - this.mouseY) / dist * 4)\n  */\n\n  // i and j function as x and y when drawing the dot grid.\n  drawDots() {\n    let size = 1;\n    let gridSize = 20;\n    for (var i = 2; i < this.canvasWidth / this.dpr / gridSize - 1; i++) {\n      for (var j = 2; j < this.canvasHeight / this.dpr / gridSize - 1; j++) {\n        let x = i * gridSize;\n        let y = j * gridSize;\n        let dist = this.pythag(x, y, this.mouseX, this.mouseY);\n        this.canvas.beginPath();\n        this.canvas.arc(\n          x + (x - this.mouseX) / dist * gridSize,\n          y + (y - this.mouseY) / dist * gridSize,\n          size,\n          size,\n          Math.PI,\n          true\n        );\n        this.canvas.fillStyle = \"white\";\n        this.canvas.fill();\n      }\n    }\n  }\n\n  // Grabs mouse position, checks if the mouse is off the screen (NaN) and calculates the distance from the mouse pointer and each dot using the pythagorean theorem.\n  pythag(ellipseX, ellipseY, mouseX, mouseY) {\n    let x = mouseX;\n    let y = mouseY;\n\n    if (x == NaN) {\n      return 1;\n    } else {\n      let leg1 = Math.abs(x - ellipseX);\n      let leg2 = Math.abs(y - ellipseY);\n      let pyth = Math.pow(leg1, 2) + Math.pow(leg2, 2);\n      return Math.sqrt(pyth);\n    }\n  }\n}\n\nconst grid = new dotGrid(\"sketch\");\ngrid.init();\n\n\n\nexport default {\n  name: 'App',\n\n  data: () => ({\n    //\n  }),\n}\n</script>\n"]},"metadata":{},"sourceType":"module"}